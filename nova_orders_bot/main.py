import asyncio
import logging
import sys

from aiogram import *
from aiogram.filters import Command
from aiogram.types import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

from back import is_in_sys, extract_first_number, is_orders_client, is_exec_n_upper, is_admin, is_work_had
from db import User, Orders, Dialogs
from db import session as sess

API_TOKEN = '7077677944:AAGF3Ybl9sAK37Kk27sttVlhfwo5X1pxyyw'
logging.basicConfig(level=logging.INFO)
router = Router()
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
dp.include_router(router)
logging.basicConfig(level=logging.INFO, stream=sys.stdout)


@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    if await is_in_sys(message.from_user.id):
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ üõí', callback_data=f'catalog')
        builder.button(text=f'–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã üíº', url='https://t.me/cnproject/2')
        builder.button(text=f'–ò–Ω—Ñ–æ ‚ÑπÔ∏è', url='https://t.me/cnproject/9')
        builder.button(text=f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 üë§', callback_data=f'help')
        if await is_orders_client(message.from_user.id):
            builder.button(text=f'–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã ‚ö°Ô∏è', callback_data=f'my_orders')
        if await is_exec_n_upper(message.from_user.id):
            builder.button(text=f'–õ–∏—Å—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç üìÑ', callback_data=f'orders')
        if await is_admin(message.from_user.id):
            builder.button(text=f'–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data=f'admin')
        if await is_work_had(message.from_user.id):
            builder.button(text=f'–ú–æ—è —Ä–∞–±–æ—Ç–∞', callback_data=f'work')

        builder.adjust(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é:", reply_markup=builder.as_markup())

    else:
        builder = InlineKeyboardBuilder()
        time_zones = [
            "UTC-12:00", "UTC-11:00", "UTC-10:00", "UTC-09:00", "UTC-08:00",
            "UTC-07:00", "UTC-06:00", "UTC-05:00", "UTC-04:00", "UTC-03:00",
            "UTC-02:00", "UTC-01:00", "UTC+00:00", "UTC+01:00", "UTC+02:00",
            "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+06:00", "UTC+07:00",
            "UTC+08:00", "UTC+09:00", "UTC+10:00", "UTC+11:00", "UTC+12:00"
        ]

        buttons = [
            [builder.button(text=f'{tz}', callback_data=f'{tz}')]
            for i, tz in enumerate(time_zones, start=1)
        ]
        print(buttons)
        text = 'üïì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: üïì'
        builder.adjust(2)
        await bot.send_message(text=text, chat_id=message.from_user.id, reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data.startswith("UTC"))
async def callback_utc(c: types.CallbackQuery):
    num = await extract_first_number(c.data)
    print(num, c.data)
    if '-' in c.data:
        num = int(num) * -1

    print(num)

    try:
        user = User(tg_id=int(c.from_user.id), status=0, username=c.from_user.username, time_zone=num)
        sess.add(user)
        sess.commit()
    except:
        pass
    await bot.send_message(text='–¢–µ–ø–µ—Ä—å –Ω–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ —Å –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å :) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start',
                           chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data == 'catalog')
async def callback_catalog(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª', callback_data=f'code')
    builder.button(text=f'–î–∏–∑–∞–π–Ω üñº', callback_data=f'paint')
    builder.button(text=f'Bitcoin ü™ô', callback_data=f'bitcoin')
    builder.adjust(1)
    await bot.send_message(text='–ù–∞—à–∏ —É—Å–ª—É–≥–∏:',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data == 'code')
async def callback_prog(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ë–æ—Ç –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', callback_data=f'bots')
    builder.button(text=f'–°–∞–π—Ç –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', callback_data=f'sites')
    builder.button(text=f'–ò–Ω–æ–µ', callback_data=f'another_prog')
    builder.adjust(1)
    await bot.send_message(text='üñ• –ù–∞—à–∏ —É—Å–ª—É–≥–∏ –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è üñ• :',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'bots')
async def callback_bots(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó:', web_app=WebAppInfo(url=f'https://nova-api.online/{c.from_user.id}/prog/bots'))
    await bot.send_message(text='–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏):',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'sites')
async def callback_sites(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó:', web_app=WebAppInfo(url=f'https://nova-api.online/{c.from_user.id}/prog/sites'))
    await bot.send_message(text='–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏):',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'another_prog')
async def callback_another_prog(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó:', web_app=WebAppInfo(url=f'https://nova-api.online/{c.from_user.id}/prog/another'))
    await bot.send_message(text='–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏):',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'orders_admin')
async def callback_orders_admin(c: types.CallbackQuery):
    if await is_admin(c.from_user.id):
        orders = sess.query(Orders).all()
        if orders:
            for o in orders:
                builder = InlineKeyboardBuilder()
                text = f'‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ó–∞–∫–∞–∑: {o.name} ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n' \
                       f'–¶–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {o.price}USDT\n' \
                       f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞: {o.cat}\n' \
                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                       f'–¢–ó –∑–∞–∫–∞–∑–∞: {o.descr}\n' \
                       f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

                if o.tg_id_executor:
                    text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{o.username_executor}\n'
                else:
                    text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚ùå\n'

                text += f'–ö–ª–∏–µ–Ω—Ç: @{o.username_client}\n'
                builder.button(text=f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥',
                               web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{c.from_user.id}/messages'))
                builder.button(text=f'–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'del_ord_{o.id}')
                builder.adjust(1)
                await bot.send_message(text=text, chat_id=c.from_user.id,
                                       reply_markup=builder.as_markup())
            await bot.send_message(text='–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ—Ç—É',
                                   chat_id=c.from_user.id)
        else:
            await bot.send_message(text='–í–∏–¥–∏–º–æ, —É –≤–∞—Å –Ω–µ—Ç—É –∑–∞–∫–∞–∑–æ–≤', chat_id=c.from_user.id)


@dp.callback_query(lambda c: c.data == 'paint')
async def callback_paint(c: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó:', web_app=WebAppInfo(url=f'https://nova-api.online/{c.from_user.id}/paints'))
    await bot.send_message(text='–ù–∞–ø–∏—à–∏—Ç–µ –¢–ó(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏):',
                           chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'bitcoin')
async def callback_bitcoin(c: types.CallbackQuery):
    await bot.send_message(text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∞ Bitcoin –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ. '
                                '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ª—é–±—É—é —É—Å–ª—É–≥—É –ø–æ Bitcoin, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç '
                                '–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ @novac0d',
                           chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data == 'help')
async def callback_help(c: types.CallbackQuery):
    await bot.send_message(text='üë§–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7üë§\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è: @novac0d',
                           chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data == 'my_orders')
async def callback_my_orders(c: types.CallbackQuery):
    orders = sess.query(Orders).filter(Orders.tg_id_client == c.from_user.id).all()
    for o in orders:
        text = f'‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ó–∞–∫–∞–∑: {o.name} ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n' \
               f'–¶–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {o.price}USDT\n' \
               f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞: {o.cat}\n'
        if o.tg_id_executor:
            text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–∞–∑–Ω–∞—á–µ–Ω ‚úÖ\n'
        else:
            text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚ùå\n'

        if await is_admin(c.from_user.id):
            text += f'–ö–ª–∏–µ–Ω—Ç: @{o.username_client}\n'
            text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{o.username_executor}\n'

        builder = InlineKeyboardBuilder()
        builder.button(text=f'üíå –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É üíå', web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{c.from_user.id}/messages'))
        builder.adjust(1)
        await bot.send_message(text=text, chat_id=c.from_user.id, reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data == 'orders')
async def callback_orders(c: types.CallbackQuery):
    if await is_exec_n_upper(c.from_user.id):
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='prog_orders')
        builder.button(text=f'–î–∏–∑–∞–π–Ω', callback_data='prog_dis')
        builder.adjust(1)
        await bot.send_message(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == 'prog_orders')
async def callback_prog_orders(c: types.CallbackQuery):
    if await is_exec_n_upper(c.from_user.id):
        orders = sess.query(Orders).filter(Orders.tg_id_executor == None, Orders.cat.in_(['–°–∞–π—Ç—ã', '–ë–æ—Ç—ã', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥—Ä—É–≥–æ–µ'])).all()
        for o in orders:
            desc = sess.query(Dialogs).filter(Dialogs.id_order == o.id).order_by(Dialogs.id.asc()).first()
            text = f'‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ó–∞–∫–∞–∑: {o.name} ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n' \
                   f'–¶–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {o.price}USDT\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞: {o.cat}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                   f'–¢–ó –∑–∞–∫–∞–∑–∞: {desc.message}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

            text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚ùå\n'

            if await is_admin(c.from_user.id):
                text += f'–ö–ª–∏–µ–Ω—Ç: @{o.username_client}\n'

            builder = InlineKeyboardBuilder()
            builder.button(text=f'–í–∑—è—Ç—å –∑–∞–∫–∞–∑', web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{c.from_user.id}/take_it'))
            builder.adjust(1)
            await bot.send_message(text=text, chat_id=c.from_user.id, reply_markup=builder.as_markup())
        await bot.send_message(text='–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ—Ç—É', chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data == 'prog_dis')
async def callback_prog_dis(c: types.CallbackQuery):
    if await is_exec_n_upper(c.from_user.id):
        orders = sess.query(Orders).filter(Orders.tg_id_executor == None, Orders.cat == '–î–∏–∑–∞–π–Ω').all()
        for o in orders:
            desc = sess.query(Dialogs).filter(Dialogs.id_order == o.id).order_by(Dialogs.id.asc()).first()
            text = f'‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è –ó–∞–∫–∞–∑: {o.name} ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n' \
                   f'–¶–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {o.price}USDT\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞: {o.cat}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                   f'–¢–ó –∑–∞–∫–∞–∑–∞: {desc.message}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'

            text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚ùå\n'

            if await is_admin(c.from_user.id):
                text += f'–ö–ª–∏–µ–Ω—Ç: @{o.username_client}\n'

            builder = InlineKeyboardBuilder()
            builder.button(text=f'–í–∑—è—Ç—å –∑–∞–∫–∞–∑', web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{c.from_user.id}/take_it'))
            builder.adjust(1)
            await bot.send_message(text=text, chat_id=c.from_user.id, reply_markup=builder.as_markup())
        await bot.send_message(text='–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ—Ç—É',
                               chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data == 'work')
async def callback_work(c: types.CallbackQuery):
    if await is_exec_n_upper(c.from_user.id):
        orders = sess.query(Orders).filter(Orders.tg_id_executor == c.from_user.id).all()
        if orders:
            builder = InlineKeyboardBuilder()
            builder.adjust(1)
            for o in orders:
                builder.button(text=f'–ó–∞–∫–∞–∑: {o.name}',
                               web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{c.from_user.id}/messages'))
            await bot.send_message(text='–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã: ', chat_id=c.from_user.id, reply_markup=builder.as_markup())
        else:
            await bot.send_message(text='–í–∏–¥–∏–º–æ, —É –≤–∞—Å –Ω–µ—Ç—É –∑–∞–∫–∞–∑–æ–≤', chat_id=c.from_user.id)

@dp.callback_query(lambda c: c.data.startswith("cancel_exec_"))
async def callback_cancel_exec_(c: types.CallbackQuery):
    if await is_exec_n_upper(c.from_user.id):
        id_order = c.data.replace('cancel_exec_', '')
        print(id_order)
        id_order = int(id_order)
        order = sess.query(Orders).filter(Orders.id == id_order).first()
        order.tg_id_executor = None
        order.username_executor = None
        sess.add(order)
        sess.commit()
        await bot.send_message(text=f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞', chat_id=c.from_user.id)
        await bot.send_message(text=f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã.',
                               chat_id=order.tg_id_client)

@dp.callback_query(lambda c: c.data == 'admin')
async def callback_admin(c: types.CallbackQuery):
    if await is_admin(c.from_user.id):
        builder = InlineKeyboardBuilder()
        builder.adjust(1)
        builder.button(text=f'–í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data='orders_admin')
        builder.button(text=f'–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑', web_app=WebAppInfo(url=f'https://nova-api.online/search/{c.from_user.id}'))
        builder.button(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', web_app=WebAppInfo(url=f'https://nova-api.online/do_exec/{c.from_user.id}'))
        builder.button(text=f'–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º', web_app=WebAppInfo(url=f'https://nova-api.online/do_admin/{c.from_user.id}'))
        builder.button(text=f'–ü–æ–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                       web_app=WebAppInfo(url=f'https://nova-api.online/do_usual/{c.from_user.id}'))
        builder.adjust(1)
        await bot.send_message(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', chat_id=c.from_user.id, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data.startswith("del_ord_"))
async def callback_del_ord_(c: types.CallbackQuery):
    if await is_admin(c.from_user.id):
        id_order = int(c.data.replace('del_ord_', ''))
        order = sess.query(Orders).filter(Orders.id == id_order).first()
        messages = sess.query(Dialogs).filter(Dialogs.id_order == order.id)
        sess.delete(order)
        for m in messages:
             sess.delete(m)
        sess.commit()
        await bot.send_message(text=f'–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–∫–∞–∑', chat_id=c.from_user.id)

async def main() -> None:
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
