from aiogram.types import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI
from fastapi.params import Form
from starlette.requests import Request
from starlette.responses import RedirectResponse
from starlette.templating import Jinja2Templates
from jinja2 import Environment, FileSystemLoader, select_autoescape
from sqlalchemy import func
from back import is_admin
from db import *
from filters import *
from main import bot

env = Environment(
    loader=FileSystemLoader('templates'),
    autoescape=select_autoescape(['html', 'xml'])
)
env.filters['time_delta'] = time_delta
env.filters['format_datetime'] = format_datetime

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI –∏ Jinja2Templates —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
app = FastAPI()
templates = Jinja2Templates(directory="templates")
templates.env = env



@app.get("/{id}/prog/sites")
async def prog_sites(request: Request, id: int):
    return templates.TemplateResponse(request, "form_order.html", context={'tg_id_client': id, "cat": '–°–∞–π—Ç—ã'})

@app.post("/{id}/form/{cat}")
async def prog_another(request: Request, id: int, cat: str, name: str = Form(default=None), description: str = Form(default=None),
                     price: str = Form(default=None)):
    user = session.query(User).filter(User.tg_id == int(id)).first()
    order = Orders(tg_id_client=int(id), username_client=user.username, cat=cat, price=int(price), name=name, descr=description)
    session.add(order)
    session.commit()
    mess = Dialogs(id_order=int(order.id), tg_id_client=id, message=description)
    session.add(mess)
    session.commit()
    await bot.send_message(text='–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –µ–≥–æ –≤–æ–∑—å–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–¥–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. '
                                '–ï—Å–ª–∏ –≤–∞–º –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '
                                '–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞, –≤—ã —Ç–∞–∫ –∂–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. ', chat_id=user.tg_id)
    executors = session.query(User).filter(User.status == 2).all()
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–í–∑—è—Ç—å –∑–∞–∫–∞–∑', callback_data=f'takeorder_{order.id}')
    builder.adjust(1)
    for e in executors:
        text = '‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚úÖ\n' \
               f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.cat}' \
               f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}' \
               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' \
               f'–¢–ó: {description}\n' \
               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' \
               f'üí≤üí≤üí≤ –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {price}USDT (–ü—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞, –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Ü–µ–Ω—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é)'

        await bot.send_message(text=text, chat_id=e.tg_id, reply_markup=builder.as_markup())
    return RedirectResponse(f'/{order.id}/{user.tg_id}/{id}/messages', status_code=302)


@app.get("/{id}/prog/bots")
async def prog_bots(request: Request, id: int):
    return templates.TemplateResponse(request, "form_order.html", context={'tg_id_client': id, "cat": '–ë–æ—Ç—ã'})

@app.get("/{id}/prog/another")
async def prog_another(request: Request, id: int):
    return templates.TemplateResponse(request, "form_order.html", context={'tg_id_client': id, "cat": '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥—Ä—É–≥–æ–µ'})

@app.get("/{id}/paints")
async def prog_paints(request: Request, id: int):
    return templates.TemplateResponse(request, "form_order.html", context={'tg_id_client': id, "cat": '–î–∏–∑–∞–π–Ω'})

@app.get("/{order_id}/{tg_id_client}/{here_id}/messages")
async def dialog(request: Request, order_id: int, tg_id_client: int, here_id: int):
    messages = session.query(Dialogs).filter(Dialogs.id_order == order_id).order_by(Dialogs.data_time.desc()).all()
    order = session.query(Orders).filter(Orders.id == order_id).first()
    client = session.query(User).filter(User.tg_id == int(tg_id_client)).first()
    print(tg_id_client, client)
    executor = session.query(User).filter(User.tg_id == order.tg_id_executor).first()
    if executor:
        return templates.TemplateResponse(request, "dialog.html", context={"messages": messages, "order": order,
                                                                  "time_cl": int(client.time_zone), "time_ex": int(executor.time_zone), "here": here_id})
    else:
        return templates.TemplateResponse(request, "dialog.html", context={"messages": messages, "order": order,
                                                                               "time_cl": int(client.time_zone),
                                                                               "here": here_id, "time_ex": 0})

@app.post("/{order_id}/{tg_id_client}/{here_id}/messages")
async def dialog(request: Request, order_id: int, tg_id_client: int, here_id: int, message: str = Form(default=None)):
    if tg_id_client == here_id:
        mess = Dialogs(id_order=int(order_id), tg_id_client=int(tg_id_client), message=message, data_time=datetime.datetime.utcnow())
        session.add(mess)
        session.commit()
        order = session.query(Orders).filter(Orders.id == order_id).first()
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–ó–∞–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ ‚û°Ô∏è', web_app=WebAppInfo(url=f'https://nova-api.online/{order_id}/{tg_id_client}/{order.tg_id_executor}/messages'))
        builder.adjust(1)
        try:
            await bot.send_message(text='üì©üì¨ –í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ üì©üì¨', chat_id=order.tg_id_executor, reply_markup=builder.as_markup())
        except:
            pass
        return RedirectResponse(f'/{order_id}/{tg_id_client}/{here_id}/messages', status_code=302)
    else:
        mess = Dialogs(id_order=int(order_id), tg_id_executor=int(here_id), message=message, data_time=datetime.datetime.utcnow())
        session.add(mess)
        session.commit()
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–ó–∞–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ ‚û°Ô∏è', web_app=WebAppInfo(url=f'https://nova-api.online/{order_id}/{tg_id_client}/{tg_id_client}/messages'))
        builder.adjust(1)
        try:
            await bot.send_message(text='üì©üì¨ –í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ üì©üì¨', chat_id=tg_id_client,
                               reply_markup=builder.as_markup())
        except:
            pass
        return RedirectResponse(f'/{order_id}/{tg_id_client}/{here_id}/messages', status_code=302)

@app.get("/{order_id}/{tg_id_client}/{exec_id}/take_it")
async def take(request: Request, order_id: int, tg_id_client: int, exec_id: int):
    order = session.query(Orders).filter(Orders.id == order_id).first()
    exec_u = session.query(User).filter(User.tg_id == int(exec_id)).first()
    if order.tg_id_executor == None:
        order.tg_id_executor = int(exec_id)
        order.username_executor = exec_u.username
        session.add(order)
        session.commit()
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', web_app=WebAppInfo(url=f'https://nova-api.online/{order_id}/{tg_id_client}/{exec_id}/messages'))
        await bot.send_message(text='‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑! ‚úÖ', chat_id=exec_id, reply_markup=builder.as_markup())
        await bot.send_message(text='‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è—Ç! ‚úÖ', chat_id=tg_id_client, reply_markup=builder.as_markup())
        return RedirectResponse(f'/{order_id}/{tg_id_client}/{exec_id}/messages', status_code=302)
    else:
        pass

@app.get("/{order_id}/{tg_id}/price")
async def change_price(request: Request, tg_id: int, order_id: int):
    order = session.query(Orders).filter(Orders.id == order_id).first()
    return templates.TemplateResponse(request, "new_price.html", context={"order": order, "tg_id": tg_id})

@app.post("/{order_id}/{tg_id}/price")
async def change_price(request: Request, order_id: int, tg_id: int, digits: str = Form(default=None)):
    order = session.query(Orders).filter(Orders.id == order_id).first()
    order.price = int(digits)
    session.add(order)
    session.commit()
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ó–∞–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ ‚û°Ô∏è',  web_app=WebAppInfo(url=f'https://nova-api.online/{order_id}/{order.tg_id_client}/{tg_id}/messages'))
    try:
        await bot.send_message(text=f'üí∏ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {digits} usdt üí∏', chat_id=order.tg_id_executor, reply_markup=builder.as_markup())
    except:
        pass
    await bot.send_message(text=f'üí∏ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {digits} usdt üí∏', chat_id=order.tg_id_client, reply_markup=builder.as_markup())
    return RedirectResponse(f'/{order_id}/{order.tg_id_client}/{tg_id}/messages', status_code=302)

@app.get("/{order_id}/{tg_id}/cancel_exec")
async def cancel_exec(request: Request, order_id: int, tg_id: int, digits: str = Form(default=None)):
    order = session.query(Orders).filter(Orders.id == order_id).first()
    builder = InlineKeyboardBuilder()
    builder.button(text=f'–û—Ç–∫–∞–∑–∞—Ç—å—Å—è üë∫ü´°', callback_data=f'cancel_exec_{order_id}')
    await bot.send_message(text=f'–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞? –ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç–æ –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –±—É–¥–µ—Ç —É –≤–∞—Å.', chat_id=tg_id, reply_markup=builder.as_markup())
    return RedirectResponse(f'/rightback', status_code=302)


@app.get("/rightback")
async def change_price(request: Request):
    return templates.TemplateResponse(request, "rightback.html")

@app.get("/search/{id_tg}")
async def change_price(request: Request, id_tg: int):
    return templates.TemplateResponse(request, "search.html")

@app.post("/search/{id_tg}")
async def change_price(request: Request, id_tg: int, keys: str = Form(default=None)):
    res = []
    keys = keys.split(' ')
    for k in keys:
        k = k.lower()
        ord_n = session.query(Orders).filter(func.lower(Orders.name).ilike(f'%{k}%')).all()
        try:
            ord_p = session.query(Orders).filter(Orders.name == int(k)).all()
        except:
            ord_p = []

        ord_m = session.query(Orders).filter(func.lower(Orders.descr).ilike(f'%{k}%')).all()
        if ord_m:
            res.extend(ord_m)
        if ord_p:
            res.extend(ord_p)
        if ord_n:
            res.extend(ord_n)

    if res:
        for o in res:
            text = f'‚≠ê‚≠ê‚≠ê –ó–∞–∫–∞–∑: {o.name} ‚≠ê‚≠ê‚≠ê\n' \
                   f'–¶–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞: {o.price}USDT\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞: {o.cat}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' \
                   f'–¢–ó –∑–∞–∫–∞–∑–∞: {o.descr}\n' \
                   f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'

            text += f'–ö–ª–∏–µ–Ω—Ç: @{o.username_client}\n'
            if o.tg_id_executor:
                text += f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{o.username_executor}\n'

            builder = InlineKeyboardBuilder()
            if o.tg_id_executor:
                builder.button(text=f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
                               web_app=WebAppInfo(url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{o.tg_id_executor}/messages'))
            else:
                builder.button(text=f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
                               web_app=WebAppInfo(
                                   url=f'https://nova-api.online/{o.id}/{o.tg_id_client}/{o.tg_id_client}/messages'))
            builder.button(text=f'–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'del_ord_{o.id}')
            builder.adjust(1)
            await bot.send_message(text=text, chat_id=id_tg, reply_markup=builder.as_markup())
        return RedirectResponse(f'/rightback', status_code=302)

    else:
        await bot.send_message(text='–ö–∞–∂–µ—Ç—Å—è, –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞—à–µ–ª—Å—è', chat_id=id_tg)
        return RedirectResponse(f'/rightback', status_code=302)


@app.get("/do_exec/{id_tg}")
async def do_exec(request: Request, id_tg: int, username: str = Form(default=None)):
    return templates.TemplateResponse(request, "do_exec.html")

@app.post("/do_exec/{id_tg}")
async def do_exec(request: Request, id_tg: int, username: str = Form(default=None)):
    user = session.query(User).filter(User.username == username).first()
    if user:
        user.status = 2
        session.add(user)
        session.commit()
        bot.send_message(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', chat_id=id_tg)
        return RedirectResponse(f'/rightback', status_code=302)
    else:
        await bot.send_message(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–æ—Ç–µ', chat_id=id_tg)
    return RedirectResponse(f'/rightback', status_code=302)

@app.get("/do_admin/{id_tg}")
async def do_admin(request: Request, id_tg: int, username: str = Form(default=None)):
    return templates.TemplateResponse(request, "do_exec.html")

@app.post("/do_admin/{id_tg}")
async def do_admin(request: Request, id_tg: int, username: str = Form(default=None)):
    user = session.query(User).filter(User.username == username).first()
    if user:
        user.status = 1
        session.add(user)
        session.commit()
        bot.send_message(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', chat_id=id_tg)
        return RedirectResponse(f'/rightback', status_code=302)
    else:
        await bot.send_message(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–æ—Ç–µ', chat_id=id_tg)
    return RedirectResponse(f'/rightback', status_code=302)
